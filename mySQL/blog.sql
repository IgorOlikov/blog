-- phpMyAdmin SQL Dump
-- version 4.8.3
-- https://www.phpmyadmin.net/
--
-- Хост: 127.0.0.1:3306
-- Время создания: Ноя 02 2018 г., 19:07
-- Версия сервера: 5.7.23
-- Версия PHP: 7.1.22

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `blog`
--

-- --------------------------------------------------------

--
-- Структура таблицы `categories`
--

CREATE TABLE `categories` (
  `id` int(10) UNSIGNED NOT NULL,
  `title` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `slug` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `categories`
--

INSERT INTO `categories` (`id`, `title`, `slug`, `created_at`, `updated_at`) VALUES
(1, 'Web Development', 'sit', '2018-10-17 14:30:13', '2018-10-30 08:54:42'),
(2, 'Front-end', 'qui', '2018-10-17 14:30:59', '2018-10-30 08:55:01'),
(3, 'Back-end', 'est', '2018-10-17 14:30:59', '2018-10-30 08:55:10'),
(4, 'Frameworks', 'iusto', '2018-10-17 14:30:59', '2018-10-30 08:55:52'),
(5, 'Programming News', 'cum', '2018-10-17 14:30:59', '2018-10-30 08:56:28');

-- --------------------------------------------------------

--
-- Структура таблицы `comments`
--

CREATE TABLE `comments` (
  `id` int(10) UNSIGNED NOT NULL,
  `text` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `user_id` int(11) NOT NULL,
  `post_id` int(11) NOT NULL,
  `status` int(11) NOT NULL DEFAULT '0',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Структура таблицы `migrations`
--

CREATE TABLE `migrations` (
  `id` int(10) UNSIGNED NOT NULL,
  `migration` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `batch` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `migrations`
--

INSERT INTO `migrations` (`id`, `migration`, `batch`) VALUES
(17, '2014_10_12_000000_create_users_table', 1),
(18, '2014_10_12_100000_create_password_resets_table', 1),
(19, '2018_10_08_113828_create_categories_table', 1),
(20, '2018_10_08_115015_create_tags_table', 1),
(21, '2018_10_08_115126_create_comments_table', 1),
(22, '2018_10_08_115144_create_posts_table', 1),
(23, '2018_10_08_115210_create_subscriptions_table', 1),
(24, '2018_10_08_120524_create_posts_tags_table', 1),
(25, '2018_10_13_234359_add_avatar_column_to_users', 2),
(26, '2018_10_14_180037_make_password_nullable', 3),
(27, '2018_10_15_225025_add_date_to_posts', 4),
(28, '2018_10_15_233805_add_image_to_posts', 5),
(29, '2018_10_17_233004_add_description_to_posts', 6);

-- --------------------------------------------------------

--
-- Структура таблицы `password_resets`
--

CREATE TABLE `password_resets` (
  `email` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `token` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Структура таблицы `posts`
--

CREATE TABLE `posts` (
  `id` int(10) UNSIGNED NOT NULL,
  `title` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `slug` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `content` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `category_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `status` int(11) NOT NULL DEFAULT '0',
  `views` int(11) NOT NULL DEFAULT '0',
  `is_featured` int(11) NOT NULL DEFAULT '0',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `date` date DEFAULT NULL,
  `image` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `description` text COLLATE utf8mb4_unicode_ci
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `posts`
--

INSERT INTO `posts` (`id`, `title`, `slug`, `content`, `category_id`, `user_id`, `status`, `views`, `is_featured`, `created_at`, `updated_at`, `date`, `image`, `description`) VALUES
(1, 'Первый сайт. Как он сделан?', 'reiciendis-accusamus-debitis-ratione-tempore-omnis-ut', '<p>Наконец-то я выкладываю в сеть свой первый сайт, он&nbsp;сделан при использовании следующих технологий PHP,MySQL,JavaScript,Laravel.</p>\r\n\r\n<p>Как именно создавался сайт.</p>\r\n\r\n<p>Почти вся верстка взята в виде готового шаблона, я лишь подключал , копировал нужный JavaScript код и стили с помощью WebPack и разбивал всю верстку на части - layout.blade.php, indexblade.php и т.д.</p>\r\n\r\n<p>Выводил в вёрстке нужные данные из базы данных используя Laravel как свой основной инструмент. Всё началось конечно с создания моделей, контроллеров и видов.</p>\r\n\r\n<p>Функционал сайта простой, в нем есть панель Администратора , вкладки создания, редактирования - постов, пользователей, подписчиков,категорий, тегов, система удаления, одобрения комментариев.</p>\r\n\r\n<p>Также сделан роутинг при помощи middleware, регистрация, авторизация, редактирование своего профиля пользователем, смена картинок постов, смена аватаров пользователя,баны пользователей через админ панель.</p>\r\n\r\n<p>Ну вообщем здесь есть всё самое основное, что используется почти во всех сайтах. Я дальше буду совершенствовать этот блог, добавляя новый функционал.</p>', 1, 1, 0, 2903, 1, '2018-10-17 14:34:25', '2018-10-31 07:55:26', '2018-10-17', 'yehnGcgIrS.jpeg', '<p>Мой первый сайт во всемирной путине.</p>'),
(2, 'Что такое Laravel?', 'nihil-nobis-reiciendis-laboriosam-sed-est-accusamus-magni-alias', '<p><strong>Laravel</strong>&nbsp;&mdash; бесплатный веб-<a href=\"https://ru.wikipedia.org/wiki/%D0%A4%D1%80%D0%B5%D0%B9%D0%BC%D0%B2%D0%BE%D1%80%D0%BA\">фреймворк</a>&nbsp;с&nbsp;<a href=\"https://ru.wikipedia.org/wiki/%D0%9E%D1%82%D0%BA%D1%80%D1%8B%D1%82%D1%8B%D0%B9_%D0%BA%D0%BE%D0%B4\">открытым кодом</a>, предназначенный для разработки с использованием архитектурной модели&nbsp;<a href=\"https://ru.wikipedia.org/wiki/Model-View-Controller\">MVC</a>&nbsp;(<a href=\"https://ru.wikipedia.org/wiki/%D0%90%D0%BD%D0%B3%D0%BB%D0%B8%D0%B9%D1%81%D0%BA%D0%B8%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA\">англ.</a>&nbsp;Model View Controller&nbsp;&mdash; модель-представление-контроллер). Laravel выпущен под&nbsp;<a href=\"https://ru.wikipedia.org/wiki/%D0%9B%D0%B8%D1%86%D0%B5%D0%BD%D0%B7%D0%B8%D1%8F_MIT\">лицензией MIT</a>. Исходный код проекта размещается на&nbsp;<a href=\"https://ru.wikipedia.org/wiki/GitHub\">GitHub</a><a href=\"https://ru.wikipedia.org/wiki/Laravel#cite_note-sitepoint-1\">[1]</a>.</p>\r\n\r\n<p>В результате опроса&nbsp;<em>sitepoint.com</em>&nbsp;в декабре 2013 года о самых популярных&nbsp;<a href=\"https://ru.wikipedia.org/wiki/PHP\">PHP</a>-фреймворках Laravel занял место самого многообещающего проекта на 2014 год<a href=\"https://ru.wikipedia.org/wiki/Laravel#cite_note-2\">[2]</a>.</p>\r\n\r\n<p>В 2015 году в результате опроса&nbsp;<em>sitepoint.com</em>&nbsp;по использованию&nbsp;<a href=\"https://ru.wikipedia.org/wiki/PHP\">PHP</a>-фреймворков среди программистов занял первое место в номинациях:</p>\r\n\r\n<ul>\r\n	<li>Фреймворк корпоративного уровня</li>\r\n	<li>Фреймворк для личных проектов</li>\r\n	<li>Кладезь антипаттернов</li>\r\n</ul>\r\n\r\n<p>История Laravel.</p>\r\n\r\n<p>Laravel был создан Taylor Otwell как более функциональная альтернатива&nbsp;<a href=\"https://ru.wikipedia.org/wiki/CodeIgniter\">CodeIgniter</a>, который не предусматривал различные дополнительные функции. Первый бета-релиз Laravel стал доступен 9 июня 2011 года, а Laravel 1 вышел в этом же месяце. Laravel 1 включает в себя встроенную поддержку для аутентификации, локализации, модели, представления, сессий, маршрутизации и других механизмов.</p>\r\n\r\n<p>Laravel 2 был выпущен в сентябре 2011 года. Основные новые функции включают в себя поддержку контроллеров, которые сделали фреймворк полностью&nbsp;<a href=\"https://ru.wikipedia.org/wiki/Model-View-Controller\">MVC</a>-совместимым, встроенную поддержку для&nbsp;<a href=\"https://ru.wikipedia.org/wiki/%D0%98%D0%BD%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F_%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F\">инверсии управления</a>&nbsp;и систему шаблонов Blade.</p>\r\n\r\n<p>Laravel 3 был выпущен в феврале 2012 года с набором новых функций, включая интерфейс командной строки (CLI) под именем &quot;Artisan&quot;, встроенную поддержку нескольких&nbsp;<a href=\"https://ru.wikipedia.org/wiki/%D0%A1%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0_%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F_%D0%B1%D0%B0%D0%B7%D0%B0%D0%BC%D0%B8_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85\">систем управления базами данных</a>, миграции баз данных в виде контроля версий, обработку событий. Выпуск Laravel 3 получил значительное увеличение числа пользователей, что повлияло на его популярность.</p>\r\n\r\n<p>Laravel 4 был выпущен в мае 2013 года. Были произведены существенные изменения структуры Laravel, перенося ее макет в набор отдельных пакетов, распространяемых через Composer. Такая компоновка улучшила расширяемость Laravel 4, которая сочеталась с официальным регулярным расписанием релиза, охватывающим шесть месяцев между небольшими выпусками. Другие новые функции в выпуске Laravel 4 включают в себя выгрузка таблиц базы данных для первоначальной популяции, поддержку очередей сообщений, встроенную поддержку отправки различных типов электронной почты и поддержку &quot;мягкого&quot; удаления записей базы данных.</p>\r\n\r\n<p>Laravel 5 был выпущен в феврале 2015 года в результате внутренних изменений, которые закончились перенумерацией релиза Laravel 4.3 в будущем. Новые возможности в выпуске Laravel 5 включают поддержку планирования периодически выполняемых задач через пакет Scheduler, слой абстракции Flysystem, который позволяет использовать удаленное хранилище так же, как и локальные файловые системы, улучшенную обработку активов пакета через Elixir и упрощенная аутентификация с внешней стороны через дополнительный пакет Socialite. Laravel 5 также представил новую внутреннюю структуру дерева каталогов для разработанных приложений.</p>\r\n\r\n<p>Laravel 5.1, выпущенный в июне 2015 года. Является первым выпуском Laravel для долгосрочной поддержки (LTS) с запланированной возможностью исправления ошибок в течение трех лет и исправлений безопасности в течение трех лет.</p>\r\n\r\n<p>Laravel 5.3, выпущенный 23 августа 2016 года. Новые функции в 5.3 сосредоточены на улучшении скорости разработки, добавив дополнительные усовершенствования для отдельных задач.</p>\r\n\r\n<p>Laravel 5.4, выпущенный 24 января 2017 года. В этом выпуске есть много новых функций, таких как Laravel Dusk, Laravel Mix, Blade Components и Slots, Markdown Emails, автоматические фасады, улучшения маршрута.</p>\r\n\r\n<p>Laravel 5.5, выпущенный 30 августа 2017 года. Возвращен пакет Whoops для отладки ошибок. Из нововведений, метод обработки запроса, новые директивы для шаблонизатора Blade, новая команда для миграции баз данных -&nbsp;<em>migrate:fresh.</em></p>\r\n\r\n<h2>Возможности</h2>\r\n\r\n<p>Ключевые особенности, лежащие в основе архитектуры Laravel</p>\r\n\r\n<ul>\r\n	<li><em>Пакеты</em>&nbsp;(<a href=\"https://ru.wikipedia.org/wiki/%D0%90%D0%BD%D0%B3%D0%BB%D0%B8%D0%B9%D1%81%D0%BA%D0%B8%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA\">англ.</a>&nbsp;packages) &mdash; позволяют создавать и подключать модули в формате&nbsp;<a href=\"https://ru.wikipedia.org/wiki/Composer\">Composer</a>&nbsp;к приложению на Laravel. Многие дополнительные возможности уже доступны в виде таких модулей.</li>\r\n	<li><em>Eloquent&nbsp;<a href=\"https://ru.wikipedia.org/wiki/ORM\">ORM</a></em>&nbsp;&mdash; реализация&nbsp;<a href=\"https://ru.wikipedia.org/wiki/%D0%A8%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F\">шаблона проектирования</a>&nbsp;<a href=\"https://ru.wikipedia.org/wiki/ActiveRecord\">ActiveRecord</a>&nbsp;на PHP. Позволяет строго определить отношения между объектами&nbsp;<a href=\"https://ru.wikipedia.org/wiki/%D0%91%D0%B0%D0%B7%D0%B0_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85\">базы данных</a>. Стандартный для Laravel построитель запросов Fluent поддерживается ядром Eloquent.</li>\r\n	<li><em>Логика приложения</em>&nbsp;&mdash; часть разрабатываемого приложения, объявленная либо при помощи контроллеров, либо маршрутов (<a href=\"https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D0%BC%D1%8B%D0%BA%D0%B0%D0%BD%D0%B8%D0%B5_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)\">функций-замыканий</a>). Синтаксис объявлений похож на синтаксис, используемый в&nbsp;<a href=\"https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BD%D1%8B%D0%B9_%D0%BA%D0%B0%D1%80%D0%BA%D0%B0%D1%81\">каркасе</a>&nbsp;<a href=\"https://ru.wikipedia.org/wiki/Sinatra\">Sinatra</a>.</li>\r\n	<li><em>Обратная маршрутизация</em>&nbsp;связывает между собой генерируемые приложением ссылки и маршруты, позволяя изменять последние с автоматическим обновлением связанных ссылок. При создании ссылок с помощью именованных маршрутов Laravel автоматически генерирует конечные&nbsp;<a href=\"https://ru.wikipedia.org/wiki/URL\">URL</a>.</li>\r\n	<li><em><a href=\"https://ru.wikipedia.org/wiki/REST\">REST</a>-контроллеры</em>&nbsp;&mdash; дополнительный слой для разделения логики обработки GET- и POST-запросов&nbsp;<a href=\"https://ru.wikipedia.org/wiki/HTTP\">HTTP</a>.</li>\r\n	<li><em>Автозагрузка классов</em>&nbsp;&mdash; механизм автоматической загрузки классов&nbsp;<a href=\"https://ru.wikipedia.org/wiki/PHP\">PHP</a>&nbsp;без необходимости подключать файлы их определений в&nbsp;<em>include</em>. Загрузка по требованию предотвращает загрузку ненужных компонентов; загружаются только те из них, которые действительно используются.</li>\r\n	<li><em>Составители представлений</em>&nbsp;(<a href=\"https://ru.wikipedia.org/wiki/%D0%90%D0%BD%D0%B3%D0%BB%D0%B8%D0%B9%D1%81%D0%BA%D0%B8%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA\">англ.</a>&nbsp;view composers) &mdash; блоки кода, которые выполняются при генерации представления (шаблона).</li>\r\n	<li><em><a href=\"https://ru.wikipedia.org/wiki/%D0%98%D0%BD%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F_%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F\">Инверсия управления</a></em>&nbsp;(<a href=\"https://ru.wikipedia.org/wiki/%D0%90%D0%BD%D0%B3%D0%BB%D0%B8%D0%B9%D1%81%D0%BA%D0%B8%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA\">англ.</a>&nbsp;Inversion of Control) &mdash; позволяет получать экземпляры объектов по принципу обратного управления. Также может использоваться для создания и получения&nbsp;<a href=\"https://ru.wikipedia.org/wiki/Singleton\">объектов-одиночек</a>&nbsp;(<a href=\"https://ru.wikipedia.org/wiki/%D0%90%D0%BD%D0%B3%D0%BB%D0%B8%D0%B9%D1%81%D0%BA%D0%B8%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA\">англ.</a>&nbsp;singleton).</li>\r\n	<li><em>Миграции</em>&nbsp;&mdash;&nbsp;<a href=\"https://ru.wikipedia.org/wiki/%D0%A1%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0_%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F_%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8\">система управления версиями</a>&nbsp;для&nbsp;<a href=\"https://ru.wikipedia.org/wiki/%D0%91%D0%B0%D0%B7%D0%B0_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85\">баз данных</a>. Позволяет связывать изменения в коде приложения с изменениями, которые требуется внести в структуру БД, что упрощает развёртывание и обновление приложения.</li>\r\n	<li><em><a href=\"https://ru.wikipedia.org/wiki/%D0%9C%D0%BE%D0%B4%D1%83%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5_%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5\">Модульное тестирование</a></em>&nbsp;(<em>юнит-тесты</em>) &mdash; играет очень большую роль в Laravel, который сам по себе содержит большое число тестов для предотвращения&nbsp;<a href=\"https://ru.wikipedia.org/wiki/%D0%A0%D0%B5%D0%B3%D1%80%D0%B5%D1%81%D1%81%D0%B8%D0%BE%D0%BD%D0%BD%D0%BE%D0%B5_%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5\">регрессий</a>&nbsp;(ошибок вследствие обновления кода или исправления других ошибок).</li>\r\n	<li><em>Страничный вывод</em>&nbsp;(<a href=\"https://ru.wikipedia.org/wiki/%D0%90%D0%BD%D0%B3%D0%BB%D0%B8%D0%B9%D1%81%D0%BA%D0%B8%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA\">англ.</a>&nbsp;pagination) &mdash; упрощает генерацию страниц, заменяя различные способы решения этой задачи единым механизмом, встроенным в Laravel.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>', 4, 1, 1, 4855, 0, '2018-10-17 14:34:25', '2018-10-31 07:57:02', '2018-10-17', 'HIR5eWVC78.png', '<p><strong>Laravel</strong>&nbsp;-&nbsp;бесплатный веб-<a href=\"https://ru.wikipedia.org/wiki/%D0%A4%D1%80%D0%B5%D0%B9%D0%BC%D0%B2%D0%BE%D1%80%D0%BA\">фреймворк</a>&nbsp;с&nbsp;<a href=\"https://ru.wikipedia.org/wiki/%D0%9E%D1%82%D0%BA%D1%80%D1%8B%D1%82%D1%8B%D0%B9_%D0%BA%D0%BE%D0%B4\">открытым кодом</a>.</p>'),
(3, 'Информационная безопасность.Книги', 'sint-rerum-ea-voluptates-accusantium-fuga-repellat', '<p>В&nbsp;программных продуктах разработчики достаточно часто сосредотачиваются на&nbsp;функциональности и&nbsp;производительности, а&nbsp;о&nbsp;безопасности думают лишь в&nbsp;последнюю очередь. Ниже представлена подборка книг, которые помогут избавиться от&nbsp;различных &laquo;дыр&raquo; в&nbsp;безопасности. Темы самые разные: от&nbsp;мобильных и&nbsp;веб-приложений до&nbsp;Интернета вещей, десктопных программ и&nbsp;контейнеров.</p>\r\n\r\n<hr />\r\n<p><img alt=\"Обложка книги «»\" src=\"https://cdn.tproger.ru/wp-content/uploads/2018/10/Laboratorija-hakera-199x280.jpg\" style=\"height:280px; width:199px\" /></p>\r\n\r\n<h3>Лаборатория хакера</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>В книге рассмотрены методы и средства хакерства. Её особенность &mdash;&nbsp;минимум теории и максимум практики. В &laquo;Лаборатории хакера&raquo; описывается ряд способов перехвата паролей, взлома Wi-Fi сетей, дальнейшие действия злоумышленника после проникновения в локальную сеть жертвы, рассказывается о шифровании данных, способах сохранения инкогнито в Интернете и методах взлома паролей из базы Active Directory. В книге много внимания уделено изучению хакинга с использованием смартфонов.</p>\r\n\r\n<p>В книге материал больше ориентирован на Windows, но и Unix-системам автор уделил внимание. Главная её цель &mdash; ознакомить читателя с методами работы злоумышленников, чтобы он смог сделать свои проекты более защищёнными.</p>\r\n\r\n<hr />\r\n<p><img alt=\"Обложка книги «»\" src=\"https://cdn.tproger.ru/wp-content/uploads/2018/10/Haking.-Iskusstvo-jeksplojta-199x280.jpg\" style=\"height:280px; width:199px\" /></p>\r\n\r\n<h3>Хакинг. Искусство эксплойта</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Данная книга не содержит в себе каких-то готовых рецептов взлома чего-либо. Она даёт читателю необходимую базу для понимания основных направлений хакинга, например, реверс-инжиниринг и эксплуатацию уязвимостей, безопасность веб-приложений, криптографию и беспроводные сети. Кроме того, в книге даны основы языка Си и ассемблера.</p>\r\n\r\n<hr />\r\n<p><img alt=\"Обложка книги «»\" src=\"https://cdn.tproger.ru/wp-content/uploads/2018/10/hackingxbox-181x280.jpg\" style=\"height:280px; width:181px\" /></p>\r\n\r\n<h3>Hacking the Xbox: An Introduction to Reverse Engineering</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Книга предоставляет пошаговые руководства по модификации оборудования, которые учат базовым методам хакерства, а также реверс-инжинирингу. В ней подробно обсуждаются механизмы безопасности Xbox и другие темы. Кроме того, в книге даны практические указания по организации хакерской атаки и даже пайке электронных компонентов. Книга также охватывает социальные и политические последствия взлома.</p>\r\n\r\n<hr />\r\n<p><img alt=\"Обложка книги «»\" src=\"https://cdn.tproger.ru/wp-content/uploads/2018/10/Normativnaja-baza-i-standarty-v-oblasti-informacionnoj-bezopasnosti-195x280.jpg\" style=\"height:280px; width:195px\" /></p>\r\n\r\n<h3>Нормативная база и стандарты в области информационной безопасности</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Книга от Ю. Родичева содержит разбор наиболее важных нормативных документов ФСТЭК, а также международных и национальных стандартов Российской Федерации в области информационной безопасности. Это учебное пособие предназначено для студентов вузов, но будет полезно и специалистам в области ИБ.</p>\r\n\r\n<hr />\r\n<p><img alt=\"Обложка книги «»\" src=\"https://cdn.tproger.ru/wp-content/uploads/2018/10/Vvedenie-v-informacionnuju-bezopasnost-avtomatizirovannyh-sistem-196x280.jpg\" style=\"height:280px; width:196px\" /></p>\r\n\r\n<h3>Введение в информационную безопасность автоматизированных систем</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Автор В. Бондарев рассмотрел в книге законодательную базу информационной безопасности, основные подходы к созданию систем защиты информации, привёл перечень возможных угроз и классификацию предупредительных мер.</p>\r\n\r\n<p>Учебное пособие подготовлено для студентов вузов, изучающих ИБ.</p>\r\n\r\n<hr />\r\n<p><img alt=\"Обложка книги «»\" src=\"https://cdn.tproger.ru/wp-content/uploads/2018/10/6110969-a-a-birukov-informacionnaya-bezopasnost-zaschita-i-napadenie-191x280.jpg\" style=\"height:280px; width:191px\" /></p>\r\n\r\n<h3>Информационная безопасность: защита и нападение</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Во многих книгах по ИБ освещаются либо только технические аспекты, либо нормативные акты, связанные с обеспечением ИБ. Но данное учебное пособие стремится избавиться от однобокого разбора этой темы, и поэтому в ней приводятся как техническая информация, описывающая атаки и защиту от них, так и рекомендации по обеспечению информационной безопасности с соответствующими примерами.</p>\r\n\r\n<p>Книга предназначена для системных администраторов и пользователей малых и средних сетей, осуществляющих защиту корпоративных ресурсов.</p>\r\n\r\n<hr />\r\n<p><img alt=\"Обложка книги «»\" src=\"https://cdn.tproger.ru/wp-content/uploads/2018/10/41M4w-Y0MwL._SX331_BO1204203200_-187x280.jpg\" style=\"height:280px; width:187px\" /></p>\r\n\r\n<h3>The Internet of Risky Things: Trusting the Devices that Surround Us</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Профессор Шон Смит, автор этой книги, считает, что использование в Интернете вещей текущих практик информационной безопасности проектов недопустимо и может привести к неприятным последствиям. Поэтому он предлагает создавать совершенно новые подходы к обеспечению безопасности IoT-устройств.</p>\r\n\r\n<p>Книга описывает методы, позволяющие избежать ошибок при проектировании IoT, преследующие IT-проекты последние десятилетия. Пособие подойдёт разработчикам, инженерам, промышленные дизайнерам и производителям.</p>\r\n\r\n<hr />\r\n<p><img alt=\"Обложка книги «»\" src=\"https://cdn.tproger.ru/wp-content/uploads/2018/10/privacy-187x280.jpg\" style=\"height:280px; width:187px\" /></p>\r\n\r\n<h3>Privacy and the Internet of Things</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>В этой книге Интернет вещей рассматривается со стороны защиты пользовательских данных. Автор Гилад Роснер (Gilad Rosner) изучил американские и европейские концепции защиты личных данных, ценности, методы конфиденциальности и их применение в IoT.</p>\r\n\r\n<p>Читатели смогут найти в книге различные определения Интернета вещей и сформировать о нём своё мнение, понять различие в IoT между конфиденциальностью и безопасностью, изучить основные риски конфиденциальности, связанные с распространением подключенных устройств, и многое другое.</p>\r\n\r\n<hr />\r\n<p><img alt=\"Обложка книги «»\" src=\"https://cdn.tproger.ru/wp-content/uploads/2018/10/fazzing-198x280.jpg\" style=\"height:280px; width:198px\" /></p>\r\n\r\n<h3>Fuzzing: исследование уязвимостей методом грубой силы</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Фаззинг &mdash; это процесс отсылки намеренно некорректных данных в исследуемый объект с целью вызвать ситуацию сбоя или ошибку. С его помощью можно предсказать типы ошибок в программном продукте на основе полученных выходных данных. Поэтому ключ к эффективному фаззингу &mdash;&nbsp;правильный подбор данных, инструментов и изучаемых продуктов. В книге достаточно понятным языком рассказывается о том, как подвергать фаззингу программные продукты и строить собственные эффективные фаззеры, поэтому она подойдёт как новичкам в этом деле, так и опытным специалистам.</p>\r\n\r\n<hr />\r\n<p><img alt=\"Обложка книги «»\" src=\"https://cdn.tproger.ru/wp-content/uploads/2018/10/docker-security-187x280.jpg\" style=\"height:280px; width:187px\" /></p>\r\n\r\n<h3>Docker Security</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Чтобы безопасно использовать Docker, необходимо знать о потенциальных проблемах безопасности, а также об основных инструментах и ​​методах обеспечения безопасности систем на базе контейнеров. Автор этой книги Эдриан Муат (Adrian Mouat) даёт в ней рекомендации для разработки политик и процедур безопасности контейнеров.</p>\r\n\r\n<p>В книге рассматриваются такие угрозы, как эксплойты ядра, DoS-атаки, разрывы контейнеров и заражённые изображения. Хоть книга и выпущена в 2016 году, многие методы, приведенные в ней, по-прежнему актуальны.</p>\r\n\r\n<hr />\r\n<p><img alt=\"Обложка книги «»\" src=\"https://cdn.tproger.ru/wp-content/uploads/2018/10/devopssec-187x280.jpg\" style=\"height:280px; width:187px\" /></p>\r\n\r\n<h3>DevOpsSec</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Автор Джим Бёрд в своей книге рассказал об опыте создания безопасных DevOps-процессов таких компаний, как Etsy, Netflix и London Multi-Asset Exchange (LMAX). Из книги вы узнаете, как использовать такие процессы и инструменты, как контроль версий, контейнеры и Continuous Delivery, которые используют специалисты DevOps для автоматизации доставки программного обеспечения и изменений инфраструктуры. Другими словами, вы поймёте, как безопасно использовать DevOps.</p>\r\n\r\n<hr />\r\n<p><img alt=\"Обложка книги «»\" src=\"https://cdn.tproger.ru/wp-content/uploads/2018/10/51CVMG1DW-L._SX404_BO1204203200_-227x280.jpg\" style=\"height:280px; width:227px\" /></p>\r\n\r\n<h3>Spring Security Essentials</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Spring Security &mdash; это платформа, ориентированная на обеспечение аутентификации и авторизации для Java-приложений и является частью фреймворка Spring. Spring Security, как и все Spring-проекты, примечателен гибкостью и простотой масштабирования в соответствии с поставленными требованиями.</p>\r\n\r\n<p>Spring Security Essentials фокусируется на безопасности приложений &mdash;&nbsp; области, которая редко изучается разработчиком Spring. В начале книги представлены различные отраслевые стандарты безопасности и практические способы интеграции с ними. Кроме этого, пособие познакомит с некоторыми современными примерами использования, такими как создание безопасных веб-служб и RESTful-приложений.</p>\r\n\r\n<hr />\r\n<p><img alt=\"Обложка книги «»\" src=\"https://cdn.tproger.ru/wp-content/uploads/2018/10/434575-vladimir-kurbatov-politiki-bezopasnosti-kompanii-pri-rabote-v-internet-198x280.jpg\" style=\"height:280px; width:198px\" /></p>\r\n\r\n<h3>Политики безопасности компании при работе в Интернет</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Книга является первым полным русскоязычным практическим руководством по вопросам разработки политик ИБ. Её отличает последовательное изложение всех основных идей, методов и способов практического решения разработки, внедрения и поддержки политик безопасности в различных российских государственных и коммерческих структурах.</p>\r\n\r\n<hr />\r\n<p><img alt=\"Обложка книги «»\" src=\"https://cdn.tproger.ru/wp-content/uploads/2018/10/51v2gGIvIgL._SX379_BO1204203200_-214x280.jpg\" style=\"height:280px; width:214px\" /></p>\r\n\r\n<h3>Security for Web Developers: Using JavaScript, HTML, and CSS</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>В этом практическом руководстве можно найти информацию о том, как устранить угрозы безопасности веб-приложений на нескольких уровнях, включая такие области, как микросервисы. Кроме того, в книге описано, как защитить своё приложение на любой платформе.</p>\r\n\r\n<p>Автор Джон Пол Мюллер предоставляет в своей книге рекомендации и несколько примеров безопасного программирования для разработчиков с хорошим знанием CSS3, HTML5 и JavaScript. Руководство поделено на пять отдельных разделов, в которых дан материал о том, как защитить веб-приложение от вирусов, DDoS-атак, нарушений безопасности и других вторжений.</p>\r\n\r\n<hr />\r\n<p><img alt=\"Обложка книги «»\" src=\"https://cdn.tproger.ru/wp-content/uploads/2018/10/cat.png\" style=\"height:270px; width:180px\" /></p>\r\n\r\n<h3>Security and Frontend Performance</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Безопасность и производительность часто рассматриваются как отдельные проблемы, требующие разных решений. Но злоумышленники постоянно придумывают новые способы воздействия на оба аспекта веб-сайта. Поэтому нужны решения, которые могут устранять &laquo;бреши&raquo; в безопасности, одновременно повышая производительность веб-приложения. Как это возможно? В этой книге вы изучите решения, которые могут повысить безопасность и производительность конечных пользователей.</p>\r\n\r\n<hr />\r\n<p><img alt=\"Обложка книги «»\" src=\"https://cdn.tproger.ru/wp-content/uploads/2018/10/51-USIAJSAL._SX404_BO1204203200_-227x280.jpg\" style=\"height:280px; width:227px\" /></p>\r\n\r\n<h3>Mobile Application Penetration Testing</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Мобильные приложения постоянно работают с пользовательскими данными, в том числе конфиденциальными. Поэтому разработчику крайне важно проводить тесты на проникновение (penetration testing), чтобы обеспечить безопасность пользовательских данных и найти уязвимости и лазейки.</p>\r\n\r\n<p>В данной книге описаны принципы работы основных компонентов Android- и iOS-приложений. Далее читателю даётся информация о правильной настройке тестовой среды, чтобы выявить максимальное количество уязвимостей, а затем о том, как эти &laquo;бреши&raquo; устранять.</p>\r\n\r\n<hr />\r\n<p><img alt=\"Обложка книги «»\" src=\"https://cdn.tproger.ru/wp-content/uploads/2018/10/51NjnYNiqSL._SX404_BO1204203200_-227x280.jpg\" style=\"height:280px; width:227px\" /></p>\r\n\r\n<h3>Coding for Penetration Testers</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Данная книга познакомит читателей со скриптовыми языками, которые используются в инструментах для тестов на проникновение, а также с примерами того, как их использовать и в каких ситуациях.</p>\r\n\r\n<p>Второе издание много внимания уделяет использованию Powershell и различным инструментам для тестирования.</p>\r\n\r\n<hr />\r\n<p><img alt=\"Обложка книги «»\" src=\"https://cdn.tproger.ru/wp-content/uploads/2018/10/Bez-nazvanija-1-186x280.jpg\" style=\"height:280px; width:186px\" /></p>\r\n\r\n<h3>Nmap Cookbook: The Fat-Free Guide to Network Security Scanning</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Данная книга обеспечивает упрощённый охват функций сетевого сканирования, доступных в наборе утилит Nmap. Каждая функция Nmap проиллюстрирована наглядными примерами, которые помогут быстро понять их назначение.</p>\r\n\r\n<p>В книге охватываются следующие темы:</p>\r\n\r\n<ul>\r\n	<li>установка Nmap на Windows, macOS и Unix/Linux-платформы;</li>\r\n	<li>базовые и продвинутые технологии сканирования;</li>\r\n	<li>инвентаризация сетевого оборудования и сетевой аудит;</li>\r\n	<li>технологии обхода фаерволла;</li>\r\n	<li>Zenmap &mdash; графическая оболочка для Nmap;</li>\r\n	<li>NSE &mdash; скриптовый движок для Nmap;</li>\r\n	<li>Ndiff &mdash; утилита для сравнения результатов работы Nmap;</li>\r\n	<li>Ncat &mdash; гибкая сетевая утилита;</li>\r\n	<li>Nping &mdash; как Ping, но с расширенной функциональностью.</li>\r\n</ul>', 5, 1, 0, 1396, 1, '2018-10-17 14:34:25', '2018-10-31 08:06:06', '2018-10-17', 'bklk5b76gO.jpeg', '<p>Подборка книг,&nbsp; о&nbsp;различных &laquo;дыр&raquo; в&nbsp;безопасности.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>'),
(4, 'Преимущества C++', 'provident-magnam-porro-voluptas-harum-commodi-commodi-nulla-dolores', '<p>Всем доброго времени суток!<br />\r\n<br />\r\nЭто статья о том, почему же все-таки стоит выбрать C++ в качестве первого языка программирования для обучения студентов, и немного о проблемах преподавания в ВУЗах. Часть суждения, касающегося процесса обучения, основывается на личном опыте преподавания (три года, во время учёбы в аспирантуре), а также на общении с преподавателями и студентами.<br />\r\nРассматриваются преимущества языка программирования C++ именно для обучения и с точки зрения лучшего понимания основных концепций. Остальные кандидаты на роль первого языка (Pascal/Python/C#/Java) не рассматриваются, дабы не разжигать холивар. Еще раз отмечу: не для промышленной разработки и не с точки зрения такого субъективного критерия, как удобство.<br />\r\nНаписано под впечатлением откровенно рекламного поста &laquo;Delphi XE5 как основа для обучения программированию&raquo; (на момент написания, доступна только&nbsp;<a href=\"http://webcache.googleusercontent.com/search?q=cache:7cXunzD_dSAJ:habrahabr.ru/post/201144/+&amp;cd=1&amp;hl=en&amp;ct=clnk&amp;gl=ru\">версия &laquo;от гугла&raquo;</a>).<br />\r\n<br />\r\n&nbsp;</p>\r\n\r\n<p>Введение</p>\r\n\r\n<p><br />\r\nДля начала, хотелось бы отметить, что для студентов не профильных специальностей вопрос выбора первого языка программирования не рассматривается. Основы алгоритмизации (если они необходимы) можно осваивать хоть на Python, хоть на C++ (Java, C#, Pascal и т.д.). В данном случае, чем проще язык, тем он лучше: у людей необходимо сформировать хоть какую-то культуру алгоритмического мышления и понимания базовых конструкций. Студентам некоторых специальностей (юридические, экономические, гуманитарные), изучение ЯП совсем не требуется.<br />\r\nНесмотря на всю очевидность написанного выше, многим студентам-экономистам первого курса преподают программирование на Pascal на практических занятиях по информатике. Студентам, которые ещё толком не умеют работать с MS Word. Польза от таких занятий весьма и весьма сомнительна. Точно так же, студентов-математиков могут пару лет учить программировать на C++/C#/Java&hellip; но зачем? Гораздо полезнее для последующего применения своих знаний изучить программы вроде Mathcad, Simulink, Surfer и т.д.&nbsp;<br />\r\nУчитывая вышеизложенное, рассмотрим процесс выбора первого языка исключительно для студентов профильных специальностей (например, &laquo;Программная инженерия&raquo;) и смешанных специальностей с уклоном в сторону IT (например, &laquo;Прикладная математика и информатика&raquo;). Во-первых, учебный план таких специальностей предполагает достаточное количество лекций и практик (т.к. рассматривается первый язык, учитывается только первый курс): для двух связанных дисциплин (информатика и программирование) около 230 часов, в зависимости от специальности. Во-вторых, наличие заинтересованности и определённого склада ума у студентов. Такие студенты чаще всего уже пробовали программировать, а возможно даже и написали сайт/игрушку. Две эти причины, в совокупности, дают неплохую базу для начала обучения и понижают порог вхождения для обучения языку. К тому же, выпускникам рассматриваемых специальностей предстоит в дальнейшем работать в индустрии разработки ПО. Следовательно, выбор первого языка для них особо важен.&nbsp;<br />\r\n&nbsp;</p>\r\n\r\n<p>1 Почему же C++?</p>\r\n\r\n<p><br />\r\nНа первом курсе закладывается базис для дальнейшего обучения и формируется подход студента к дальнейшему получению знаний. Язык программирования играет здесь не последнюю роль.&nbsp;<br />\r\nДля того чтобы выбрать C++ в качестве первого языка программирования существует четыре причины:&nbsp;</p>\r\n\r\n<ol>\r\n	<li>Компилируемый язык со статической типизацией.</li>\r\n	<li>Сочетание высокоуровневых и низкоуровневых средств.</li>\r\n	<li>Реализация ООП.</li>\r\n	<li>STL.</li>\r\n</ol>\r\n\r\n<p><br />\r\nРассмотрим данные причины более подробно.<br />\r\n<br />\r\n<strong>Компилятор</strong>. Тут C++ предстаёт во всей красе. Множество компиляторов, консольные команды, этапы сборки программы&hellip; Да, первую программу нужно написать в простом текстовом редакторе без подсветки синтаксиса и автокомплита, найти чем и как её можно запустить. Такой подход формирует у человека некоторое понимание того, как всё устроено:</p>\r\n\r\n<ul>\r\n	<li>Код программы &ndash; это просто текст, который сам по себе не заработает.</li>\r\n	<li>Компилятор &ndash; это отдельная программа, которой надо указать, что и как сделать с исходным кодом, чтобы он превратился в исполняемый файл. Текстовый редактор &ndash; это тоже отдельная программа, предназначенная для написания исходного кода.</li>\r\n	<li>Существуют опции сборки, и существует не один компилятор.</li>\r\n	<li>Исходный код, написанный программистом, может быть предварительно обработан и изменён (например, препроцессором).</li>\r\n</ul>\r\n\r\n<p><br />\r\nБудущий специалист осознает, что код сам по себе не запускается (в дальнейшем он быть может и заинтересуется, как работает, например, интерпретатор Python или JIT-компиляция). Человек будет задавать себе вопросы: &laquo;А почему?&raquo;, &laquo;А в чём отличие?&raquo;, &laquo;Как?&raquo;. Не будет иллюзий по поводу того, что всё работает по нажатию двух волшебных кнопок или в интерактивной командной строке. Студент будет знать, что процесс сборки программы можно настроить и что исходный код может быть обработан сторонними программами. В будущем, при использовании IDE, человек будет понимать, что это всего лишь удобный комплекс программ, выполняющий большую часть рутинных операций и в случае недостаточной гибкости от неё можно отказаться или расширить.<br />\r\n<br />\r\n<strong>Статическая типизация.</strong>&nbsp;На примере языка со статической типизацией проще понять, что такое тип данных, зачем он нужен и от чего зависит. Видно, что собой представляет объявление, определение и инициализация. Использование языка C++ даёт это явно увидеть, что способствует дальнейшему пониманию того, как работают эти механизмы в других языках. Помимо этого можно на реальных примерах понять, чем беззнаковые целые отличаются от целых со знаком, чем отличаются числа двойной и одинарной точности, чем отличается символ от строки и т.д.<br />\r\n<br />\r\n<strong>Высокоуровневые и низкоуровневые средства.</strong>&nbsp;Использование таких средств, как указатели и динамическое выделение памяти, позволяет понять (или в дальнейшем способствует пониманию), что такое стэк, куча, стэк вызовов, раскрутка стэка и т.д. Помимо этого, на практике закрепляется понимание концепции адресов и адресной арифметики. На примерах демонстрируется, что память надо выделять, освобождать, потому что она не бесконечная, что существуют утечки памяти. В будущем, при изучении языков с GC проще будет понять, что же это такое.<br />\r\nОтдельно стоит отметить простой механизм передачи значений по ссылке, значению, указателю и перенос объекта. Что такое изменяемые и не изменяемые параметры. В дальнейшем данные концепции могут быть использованы и при изучении других языков. Студент будет понимать, например, что объект в языке N передаётся по ссылке, и если его значение изменить в функции-члене, то оно изменится везде.<br />\r\n<br />\r\n<strong>Реализация ООП.</strong>&nbsp;Это относительно чистая реализация ООП без всякого синтаксического сахара (относительно некоторых других языков). Чётко разграниченные уровни доступа к членам класса, возможность множественного наследования и динамический полиморфизм дают возможность быстро усвоить основные концепции ООП (абстракция, наследование, инкапсуляция и полиморфизм). Указатели и динамическое выделение памяти позволяют наглядно понять такие важные механизмы, как upcasting и downcasting. В дальнейшем, основываясь на этих знаниях, легко можно понять весь синтаксический сахар в других языках. Необходимость контроля ресурсов (в том числе и &laquo;правило трёх&raquo; или уже &laquo;правило пяти&raquo;, с учётом C++11), захват их в конструкторе и освобождение в деструкторе также способствуют более глубокому пониманию ООП.<br />\r\nСтоит отметить такой важный момент, как не принудительное ООП. То есть данный подход к программированию применяется тогда, когда это удобно, и его можно смешивать, например, с функциональным программированием. Это способствует формированию понимания того, что средства реализации выбираются исходя из задачи.<br />\r\n<br />\r\n<strong>STL</strong>. Сама по себе концепция шаблонов C++, генерации кода и применения широкого спектра алгоритмов к различным контейнерам положительно влияет на процесс обучения. Здесь все на поверхности и понятно, почему можно создать вектор целых чисел и вектор пользовательских объектов на основе одного класса-контейнера. Почему можно применить некоторую операцию к последовательности объектов или как отсортировать объекты, для которых не предусмотрена встроенная операция сравнения. Можно понять, как осуществляется доступ к элементам, и узнать о категориях итераторов. Помимо этого закрепляется понимание обобщённого программирования.<br />\r\n&nbsp;</p>\r\n\r\n<p>2 Немного о проблемах обучения</p>\r\n\r\n<p><br />\r\nПроцесс обучения, пожалуй, одна из наиболее существенных преград, для того, чтобы реализовать все то, о чём написано в предыдущем пункте. Вероятно, этот вопрос не касается топовых IT-вузов, но если взять рядовые образовательные учреждения, то ощущается дефицит квалифицированных кадров и слабая мотивация студентов. Для большей части практических дисциплин редко привлекаются специалисты, занимающиеся непосредственно разработкой ПО. Например, человек, который не применял STL в реальных проектах, вряд ли сможет объяснить, как это делать, и главное зачем. Так же, как и преподаватель, искренне считающий, что программирование на Delphi с формочками уже есть самое настоящее ООП, учитывая, что весь код (без намёка на собственные классы, абстракцию и инкапсуляцию) пишется в обработчике нажатия на кнопку с очень понятным именем &laquo;Button1&raquo;, не способствует процессу обучения. Проблемы есть и со стороны студентов, которые толком не поняли, куда и зачем они поступили. Многие студенты, не имеют мотивации к дальнейшему обучению и пониманию, а также и к самообразованию. Не смотря на то, что такие студенты и преподаватели прекрасно дополняют друг друга, в конце обучения не получится специалист, претендующий на junior-вакансию.<br />\r\n&nbsp;</p>\r\n\r\n<p>3 Заключение</p>\r\n\r\n<p><br />\r\nВ настоящий момент в мире разработки программного обеспечения сложилась ситуация, что в цене знание определённых технологий и опыт их применения, а не понимание. Современному обществу необходимо много программистов, которые могут выполнять строго определённые функции. Отчасти этому способствуют и развивающиеся технологии разработки. Возможно, что большая часть разработчиков, умеющих просто пользоваться определённым набором инструментов, никогда не столкнётся с &laquo;законом дырявых абстракций&raquo;. Однако людям, претендующим на должности ведущих разработчиков, занимающихся оптимизацией и вопросами архитектуры, необходимо более глубокое понимание того, как всё устроено. Одним из факторов, приводящих к такому пониманию, может отказаться и верный выбор первого языка программирования. На основании этого, язык C++, являющийся статически типизированным, компилируемым, поддерживающий низкоуровневую работу с памятью и не перегруженную синтаксическим сахаром реализацию ООП, можно рекомендовать в качестве первого языка программирования.</p>', 5, 1, 0, 3106, 1, '2018-10-17 14:34:25', '2018-10-30 10:50:16', '2018-10-17', 'ZqsU7oY6Qt.png', '<p>Почему C++ так хорош?</p>'),
(5, 'Самые популярные языки программирования в 2018 году.', 'hic-fugit-quam-ratione-asperiores-assumenda-quasi-et', '<p>На сегодняшний день существует огромное количество языков программирования, и сложно выбрать какой-то конкретный для изучения.&nbsp;Для этого следует оценить несколько факторов, включая ваши предпочтения, и интересоваться индустрией технологий и современными трендами.&nbsp;Предприниматель Майкл Гарбейд оценил ряд источников и выделил три самых востребованных языка в 2018 году.</p>\r\n\r\n<h2>1. JavaScript</h2>\r\n\r\n<p>JavaScript &ndash; динамический язык программирования, который в основном позволяет добавлять сайтам интерактивность.&nbsp;Многие советуют начинать изучать программирование именно с него.</p>\r\n\r\n<p>Stack Overflow, популярный сайт, где программисты делятся своими навыками, каждый год проводит опрос среди программистов и составляет статистику &ndash; от зарплат до любимых технологий.&nbsp;В январе 2018 года сайт опросил более чем 100 тысяч разработчиков.</p>\r\n\r\n<p>График самых популярных языков программирования, согласно&nbsp;<a href=\"https://insights.stackoverflow.com/survey/2018#most-popular-technologies\" target=\"_blank\">Stack Overflow</a>:</p>\r\n\r\n<p><a href=\"https://cdn-images-1.medium.com/max/800/0*-hcKuuxiLLijVCaX\" target=\"_blank\"><img src=\"https://cdn-images-1.medium.com/max/800/0*-hcKuuxiLLijVCaX\" style=\"height:674px; width:700px\" /></a></p>\r\n\r\n<p>Фото: Medium</p>\r\n\r\n<p>JavaScript возглавляет этот список уже шестой год подряд.</p>\r\n\r\n<p>GitHub, крупнейший веб-сервис для хостинга IT-проектов, также называет JavaScript самым популярным языком программирования.</p>\r\n\r\n<p><a href=\"https://cdn-images-1.medium.com/max/800/0*wyH0Qr8K1HIePqhR\" target=\"_blank\"><img src=\"https://cdn-images-1.medium.com/max/800/0*wyH0Qr8K1HIePqhR\" style=\"height:576px; width:700px\" /></a></p>\r\n\r\n<p>Фото: Medium</p>\r\n\r\n<p>Согласно опросу Stack Overflow, разработчики JavaScript зарабатывают около $55 тысяч в год. Программисты в США, использующие этот язык, зарабатывают около $98 тысяч в год.</p>\r\n\r\n<p>По оценкам&nbsp;<a href=\"https://www.indeed.com/salaries/Javascript-Developer-Salaries\" target=\"_blank\">Indeed.com</a>, популярного сайта для поиска работы, разработчик JavaScript в США в среднем зарабатывает около $110945 в год.</p>\r\n\r\n<h2>2. Java</h2>\r\n\r\n<p><a href=\"https://simpleprogrammer.com/learn-java-java-101/\" target=\"_blank\">Java&nbsp;</a>&ndash; язык программирования для создания кроссплатформенных приложений. Неважно, какую платформу вы хотите использовать для деплоя &ndash; компьютер, телефон, веб &ndash; Java подойдет вам в любом случае.</p>\r\n\r\n<p>Индекс TIOBE, оценивающий популярность языков программирования, назвал Java самым популярным языком в июле 2018 года.</p>\r\n\r\n<p><a href=\"https://cdn-images-1.medium.com/max/800/0*i2jUcZTIL7eQw_BA\" target=\"_blank\"><img src=\"https://cdn-images-1.medium.com/max/800/0*i2jUcZTIL7eQw_BA\" style=\"height:288px; width:700px\" /></a></p>\r\n\r\n<p>Фото: Medium</p>\r\n\r\n<p>Согласно опросу Stack Overflow, популярность Java составляет 45,3% &ndash; язык занимает почетное второе место в их таблице (если не считать HTML, CSS, SQL &ndash; которые по сути не являются языками программирования).</p>\r\n\r\n<p>Опрос показал, что в США разработчики Java зарабатывают $100 тысяч в год.&nbsp;<a href=\"https://www.indeed.com/salaries/Java-Developer-Salaries\" target=\"_blank\">Indeed.com</a>&nbsp;дает похожие оценки &ndash; программист Java в США зарабатывает $100873 в год.</p>\r\n\r\n<h2>3. Python</h2>\r\n\r\n<p>Python &ndash; мощный высокоуровневый язык программирования, набирающий большую популярность в 2018 году. Его используют для разных заданий &ndash; включая веб-разработку, машинное обучение и анализ данных.</p>\r\n\r\n<p>38,8% юзеров Stack Overflow для своих проектов используют Python. Согласно опросу сайта, по популярности Python в 2018 обогнал C# &ndash; а в 2017 году он обогнал PHP.</p>\r\n\r\n<p>На платформе GitHub Python разместился на втором месте в списке самых популярных языков программирования.</p>\r\n\r\n<p>Стоит также упомянуть, что развитие ИИ, вероятно, способствует росту спроса на Python. Stack Overflow называет его &laquo;<a href=\"https://stackoverflow.blog/2017/09/06/incredible-growth-python/?_ga=2.199625454.1908037254.1532442133-221121599.1532442133\" target=\"_blank\">самым быстрорастущим</a>языком программирования&raquo;.</p>\r\n\r\n<p>Рост Python:</p>\r\n\r\n<p><a href=\"https://cdn-images-1.medium.com/max/800/0*5sXl34xnPk7LW6YP\" target=\"_blank\"><img src=\"https://cdn-images-1.medium.com/max/800/0*5sXl34xnPk7LW6YP\" style=\"height:564px; width:700px\" /></a></p>\r\n\r\n<p>Фото: Medium</p>\r\n\r\n<p>Согласно опросу Stack Overflow, разработчики Python зарабатывают в среднем $56 тысяч в год. В США, по оценкам&nbsp;<a href=\"https://www.indeed.com/salaries/Python-Developer-Salaries\" target=\"_blank\">Indeed.com</a>, они получают $114811 в год.</p>\r\n\r\n<h2>Итог</h2>\r\n\r\n<p>JavaScript, Java и Python &ndash; самые востребованные языки программирования в 2018 году. Если вы хотите сделать еще один шаг вперед в своей карьере, начните изучать один из них.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<p>&nbsp;</p>', 1, 1, 0, 747, 1, '2018-10-17 14:34:25', '2018-10-30 10:21:18', '2018-10-17', 'wXXxqtnYlK.jpeg', '<p>Список самых&nbsp;популярных&nbsp;языков&nbsp;программирования на 2018 год.</p>');

-- --------------------------------------------------------

--
-- Структура таблицы `post_tags`
--

CREATE TABLE `post_tags` (
  `id` int(10) UNSIGNED NOT NULL,
  `post_id` int(11) NOT NULL,
  `tag_id` int(11) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `post_tags`
--

INSERT INTO `post_tags` (`id`, `post_id`, `tag_id`, `created_at`, `updated_at`) VALUES
(1, 1, 1, NULL, NULL),
(2, 2, 2, NULL, NULL),
(3, 3, 3, NULL, NULL),
(4, 4, 4, NULL, NULL),
(5, 5, 5, NULL, NULL),
(6, 1, 2, NULL, NULL),
(7, 1, 3, NULL, NULL),
(8, 1, 6, NULL, NULL),
(9, 2, 1, NULL, NULL),
(10, 2, 6, NULL, NULL),
(11, 4, 6, NULL, NULL),
(12, 5, 1, NULL, NULL),
(13, 5, 2, NULL, NULL),
(14, 5, 3, NULL, NULL),
(15, 5, 4, NULL, NULL),
(16, 5, 6, NULL, NULL),
(17, 3, 1, NULL, NULL),
(18, 3, 2, NULL, NULL),
(19, 3, 4, NULL, NULL),
(20, 3, 5, NULL, NULL),
(21, 3, 6, NULL, NULL);

-- --------------------------------------------------------

--
-- Структура таблицы `subscriptions`
--

CREATE TABLE `subscriptions` (
  `id` int(10) UNSIGNED NOT NULL,
  `email` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `token` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `subscriptions`
--

INSERT INTO `subscriptions` (`id`, `email`, `token`, `created_at`, `updated_at`) VALUES
(1, 'adawdad@mail.ru', 'yvqoQJyL3MhV9WXKDy8sJFC72PUJTuK0xRFLQngc4CS1UsFWEblQ4lwMiY9Np22yeWg2nx79yxuZuytiKze53bS0LrDgcpmGYFTl', '2018-10-28 10:39:38', '2018-10-28 10:39:38'),
(2, 'i.olikovz@gmail.com', 'L4KXQ6ckIRJzpy3IKogrXvk1E8RFmlTlektqbOfnX4XjctzrhuRmeFE0BhvOfxmvdvHJDv2S7JGL9OndZbQI83Lywq3VBVUdh6D8', '2018-10-28 10:56:37', '2018-10-28 10:56:37'),
(3, 'i.olikovz@gmail.com1', NULL, '2018-10-28 11:01:58', '2018-10-28 11:26:21'),
(4, 'iadad@mail.ru', '4Zvk3BuOUDieEX2mJ0v232OLpIfdcw6YIyfBcNIZpONK8ZWWlfyhCI0QRmp2nGopWzKNnRk8adg4UpZiGC2OaXr38kpS691Kjw1v', '2018-10-28 11:02:16', '2018-10-28 11:02:16'),
(5, 'john@example.com', 'oF4I50KEvP6T6vvZKaGZwbELtm7Lm1TiZEgFjeqc0dWjSnjloiQbHdzoJHPfKizAiBjiDWKMvLrjcvEssUaeEIfMZOlG9Sirubid', '2018-10-28 11:31:52', '2018-10-28 11:31:52'),
(6, 'adad@mail.ru', NULL, '2018-10-28 12:06:46', '2018-10-28 12:06:46');

-- --------------------------------------------------------

--
-- Структура таблицы `tags`
--

CREATE TABLE `tags` (
  `id` int(10) UNSIGNED NOT NULL,
  `title` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `slug` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `tags`
--

INSERT INTO `tags` (`id`, `title`, `slug`, `created_at`, `updated_at`) VALUES
(1, 'PHP', 'voluptatem', '2018-10-17 14:32:22', '2018-10-30 08:52:37'),
(2, 'MySQL', 'quisquam', '2018-10-17 14:32:22', '2018-10-30 08:52:46'),
(3, 'JavaScript', 'consequatur', '2018-10-17 14:32:22', '2018-10-30 08:52:57'),
(4, 'C++', 'harum', '2018-10-17 14:32:22', '2018-10-30 08:53:04'),
(5, 'Ruby', 'harum', '2018-10-17 14:32:22', '2018-10-30 08:53:13'),
(6, 'Programming', 'language', '2018-10-20 00:03:14', '2018-10-30 08:53:51');

-- --------------------------------------------------------

--
-- Структура таблицы `users`
--

CREATE TABLE `users` (
  `id` int(10) UNSIGNED NOT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `email` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `email_verified_at` timestamp NULL DEFAULT NULL,
  `password` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `is_admin` int(11) NOT NULL DEFAULT '0',
  `status` int(11) NOT NULL DEFAULT '0',
  `remember_token` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `avatar` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `users`
--

INSERT INTO `users` (`id`, `name`, `email`, `email_verified_at`, `password`, `is_admin`, `status`, `remember_token`, `created_at`, `updated_at`, `avatar`) VALUES
(1, 'Igor', 'i.olikov@mail.ru', NULL, '$2y$10$eaMGpXc4aijwoERow3QLFe7xFCsRh3VecS7i3TU38SkcWc3foK0eC', 1, 0, 'GpQi05d5aauTGKGjuAYuh7yjhEU0UIVHZT4Ep6DMYt1a5B014OezAtuzjhuG', '2018-10-16 20:15:40', '2018-10-28 03:56:31', 'SsgEzvN0QZ.jpeg'),
(2, 'misha', 'misha@example.com', NULL, '$2y$10$FYY5VedafdfOWlO2.uBWUOfo.TGSzmxyBgSURJ2rK.DHNqFaDgnxC', 0, 0, NULL, '2018-10-22 01:13:35', '2018-10-22 01:13:35', NULL);

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `categories`
--
ALTER TABLE `categories`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `comments`
--
ALTER TABLE `comments`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `migrations`
--
ALTER TABLE `migrations`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `password_resets`
--
ALTER TABLE `password_resets`
  ADD KEY `password_resets_email_index` (`email`);

--
-- Индексы таблицы `posts`
--
ALTER TABLE `posts`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `post_tags`
--
ALTER TABLE `post_tags`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `subscriptions`
--
ALTER TABLE `subscriptions`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `tags`
--
ALTER TABLE `tags`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `categories`
--
ALTER TABLE `categories`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=6;

--
-- AUTO_INCREMENT для таблицы `comments`
--
ALTER TABLE `comments`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT для таблицы `migrations`
--
ALTER TABLE `migrations`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=30;

--
-- AUTO_INCREMENT для таблицы `posts`
--
ALTER TABLE `posts`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=6;

--
-- AUTO_INCREMENT для таблицы `post_tags`
--
ALTER TABLE `post_tags`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=22;

--
-- AUTO_INCREMENT для таблицы `subscriptions`
--
ALTER TABLE `subscriptions`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=7;

--
-- AUTO_INCREMENT для таблицы `tags`
--
ALTER TABLE `tags`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=7;

--
-- AUTO_INCREMENT для таблицы `users`
--
ALTER TABLE `users`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
